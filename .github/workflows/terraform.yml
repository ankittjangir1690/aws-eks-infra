name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'ap-south-1'

permissions:
  contents: read
  pull-requests: read
  security-events: write

jobs:
  # Security and Quality Checks
  security-scan:
    name: 'Security & Quality Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          
      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'checkov-results.sarif'

  # Terraform Format and Validation
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        
      - name: Terraform Init
        run: terraform init
        working-directory: .
        
      - name: Terraform Validate
        run: terraform validate
        working-directory: .
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: .
        env:
          TF_VAR_project_name: "test-project"
          TF_VAR_environment: "test"
          TF_VAR_eks_admin_users: '["test-user"]'
          TF_VAR_allowed_public_cidrs: '["127.0.0.1/32"]'

  # Infrastructure Testing
  infrastructure-test:
    name: 'Infrastructure Tests'
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install test dependencies
        run: |
          pip install terraform-compliance
          pip install pytest
          pip install boto3
          
      - name: Run Terraform Compliance tests
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform-compliance -p tfplan -f tests/compliance
        working-directory: .
        env:
          TF_VAR_project_name: "test-project"
          TF_VAR_environment: "test"
          TF_VAR_eks_admin_users: '["test-user"]'
          TF_VAR_allowed_public_cidrs: '["127.0.0.1/32"]'
          
      - name: Run custom tests
        run: |
          python -m pytest tests/ -v
        working-directory: .

  # Deploy to Development
  deploy-dev:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate, infrastructure-test]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init
        run: terraform init
        working-directory: .
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: .
        env:
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME_DEV }}
          TF_VAR_environment: "dev"
          TF_VAR_eks_admin_users: ${{ secrets.EKS_ADMIN_USERS_DEV }}
          TF_VAR_allowed_public_cidrs: ${{ secrets.ALLOWED_PUBLIC_CIDRS_DEV }}
          
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: .
        env:
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME_DEV }}
          TF_VAR_environment: "dev"
          TF_VAR_eks_admin_users: ${{ secrets.EKS_ADMIN_USERS_DEV }}
          TF_VAR_allowed_public_cidrs: ${{ secrets.ALLOWED_PUBLIC_CIDRS_DEV }}

  # Deploy to Production
  deploy-prod:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-validate, infrastructure-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init
        run: terraform init
        working-directory: .
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: .
        env:
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME_PROD }}
          TF_VAR_environment: "prod"
          TF_VAR_eks_admin_users: ${{ secrets.EKS_ADMIN_USERS_PROD }}
          TF_VAR_allowed_public_cidrs: ${{ secrets.ALLOWED_PUBLIC_CIDRS_PROD }}
          
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: .
        env:
          TF_VAR_project_name: ${{ secrets.PROJECT_NAME_PROD }}
          TF_VAR_environment: "prod"
          TF_VAR_eks_admin_users: ${{ secrets.EKS_ADMIN_USERS_PROD }}
          TF_VAR_allowed_public_cidrs: ${{ secrets.ALLOWED_PUBLIC_CIDRS_PROD }}

  # Post-deployment Verification
  verify-deployment:
    name: 'Verify Deployment'
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Verify EKS cluster
        run: |
          aws eks describe-cluster --name ${{ secrets.PROJECT_NAME_DEV }}-dev-eks --region ${{ env.AWS_REGION }}
        if: needs.deploy-dev.result == 'success'
        
      - name: Verify EFS file system
        run: |
          aws efs describe-file-systems --query "FileSystems[?contains(Tags[?Key=='Name'].Value, '${{ secrets.PROJECT_NAME_DEV }}-dev-efs')]"
        if: needs.deploy-dev.result == 'success'
        
      - name: Verify VPC
        run: |
          aws ec2 describe-vpcs --filters "Name=tag:Project,Values=${{ secrets.PROJECT_NAME_DEV }}"
        if: needs.deploy-dev.result == 'success'

  # Cleanup and Notifications
  cleanup:
    name: 'Cleanup and Notifications'
    runs-on: ubuntu-latest
    needs: [verify-deployment]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#devops'
          text: |
            Terraform deployment ${{ job.status }} for ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Run: ${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Comment on PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('Terraform deployment'));
            
            const commentBody = `## ðŸš€ Terraform Deployment Status
            
            **Status:** ${{ needs.verify-deployment.result }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Security Scan Results
            - **Trivy:** ${{ needs.security-scan.result }}
            - **Checkov:** ${{ needs.security-scan.result }}
            
            ### Validation Results
            - **Format Check:** ${{ needs.terraform-validate.result }}
            - **Validation:** ${{ needs.terraform-validate.result }}
            - **Infrastructure Tests:** ${{ needs.infrastructure-test.result }}
            
            ### Deployment Results
            - **Development:** ${{ needs.deploy-dev.result }}
            - **Production:** ${{ needs.deploy-prod.result }}
            - **Verification:** ${{ needs.verify-deployment.result }}
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }
